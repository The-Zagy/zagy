import { TestChoise } from "./types.js";
export function packageJson(name, test) {
    return `{
        "name": "${name}",
        "version": "1.0.0",
        "type":"module",
        "description": "",
        "main": "dist/index.js",
        "scripts": {
            "start": "node  ./dist/index.js",
            "build": "tsc --watch --preserveWatchOutput",
            "dev": "nodemon  dist/index ",
            "ts": "ts-node-esm src/index.ts",
            "test": "${(test === TestChoise.JEST ? "cross-env NODE_OPTIONS=--experimental-vm-modules npx jest" : test)}",
            "prettier":"prettier --config .prettierrc \\"src/**/*.ts\\" --write",
            "lint":"eslint . --ext .ts"
        },
        "keywords": [],
        "author": "",
        "license": "ISC"  
    }`;
}
export function tsconfigJson(test) {
    return `{
        "compilerOptions": {
            "target": "es2021",
            "module": "ES2022",
            "lib": [
                "dom",
                "es2021"
            ],
            "sourceMap": false,
            "outDir": "dist",
            "rootDir": "src",
            "strict": true,
            "types": [
                "node",
                "${(test === TestChoise.JASMINE ? TestChoise.JASMINE : TestChoise.JEST)}"
            ],
            "esModuleInterop": true,
            "moduleResolution": "node",
            "resolveJsonModule": true,
            "baseUrl": ".",
            "allowSyntheticDefaultImports": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true,
            "noImplicitReturns": true,
            "noFallthroughCasesInSwitch": true,
            "removeComments": true,
            "allowJs": true
        },
        "include":["src"],
        "exclude":["node_modules"]
    }`;
}
export function prettierJson() {
    return `
    {
        "semi": true,
        "trailingComma": "none",
        "singleQuote": true,
        "printWidth": 80
    }`;
}
export function eslintJson() {
    return `
    {
        "root": true,
        "plugins": [
          "prettier",
          "@typescript-eslint"
        ],
        "extends": [
          "eslint:recommended",
          "prettier",
          "plugin:@typescript-eslint/recommended"
        ],
        "parser": "@typescript-eslint/parser",
        "rules": {
          "prettier/prettier": 2 ,
          "no-use-before-define": ["error", { "functions": true, "classes": true }],
          "no-var": "error",
          "prefer-const": "error"
        },
        "parserOptions": {
          "ecmaVersion": 2021
        },
        "env": {
          "node": true,
          "es6": true
        }
    }
    `;
}
export function jasmineJson() {
    return `
    {
        "spec_dir": "dist/__tests__",
        "spec_files": [
          "**/*[sS]pec.?(m)js",
          "!**/*nospec.js"
        ],
        "helpers": [
          "helpers/**/*.?(m)js"
        ],
        "env": {
          "failSpecWithNoExpectations": false,
          "stopSpecOnExpectationFailure": false,
          "stopOnSpecFailure": false,
          "random": false
        }
      }
    `;
}
export function reporterJson() {
    return `import {DisplayProcessor, SpecReporter, StacktraceOption} from "jasmine-spec-reporter";
    import SuiteInfo = jasmine.SuiteInfo;
    
    class CustomProcessor extends DisplayProcessor {
        public displayJasmineStarted(info: SuiteInfo, log: string): string {
            return ${"`${log}`"};
        }
    }
    
    jasmine.getEnv().clearReporters();
    jasmine.getEnv().addReporter(new SpecReporter({
        spec: {
            displayStacktrace: StacktraceOption.NONE
        },
        customProcessors: [CustomProcessor],
    }));`;
}
export function jestJson() {
    return `
{
    "verbose":true,
    "transform":{},
    "testEnvironment": "node",
    "moduleFileExtensions": [ "js", "jsx", "json", "node"],
    "modulePathIgnorePatterns": ["<rootDir>/src/","node_modules"]
}
    `;
}
export function gitignoreJson() {
    return `
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

public

.vscode
dev
__tests__
    `;
}
